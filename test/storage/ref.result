-- test-run result file version 2
test_run = require('test_run').new()
 | ---
 | ...
netbox = require('net.box')
 | ---
 | ...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
 | ---
 | ...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
 | ---
 | ...

test_run:create_cluster(REPLICASET_1, 'storage')
 | ---
 | ...
test_run:create_cluster(REPLICASET_2, 'storage')
 | ---
 | ...
util = require('util')
 | ---
 | ...
util.wait_master(test_run, REPLICASET_1, 'storage_1_a')
 | ---
 | ...
util.wait_master(test_run, REPLICASET_2, 'storage_2_a')
 | ---
 | ...
util.map_evals(test_run, {REPLICASET_1, REPLICASET_2}, 'bootstrap_storage()')
 | ---
 | ...

--
-- gh-147: refs allow to pin all the buckets on the storage at once. Is invented
-- for map-reduce functionality to pin all buckets on all storages in the
-- cluster to execute consistent map-reduce calls on all cluster data.
--

_ = test_run:switch('storage_1_a')
 | ---
 | ...
vshard.storage.rebalancer_disable()
 | ---
 | ...
vshard.storage.bucket_force_create(1, 1500)
 | ---
 | - true
 | ...

_ = test_run:switch('storage_2_a')
 | ---
 | ...
vshard.storage.rebalancer_disable()
 | ---
 | ...
vshard.storage.bucket_force_create(1501, 1500)
 | ---
 | - true
 | ...

_ = test_run:switch('storage_1_a')
 | ---
 | ...
lref = require('vshard.storage.ref')
 | ---
 | ...

--
-- Bucket moves are not allowed under a ref.
--
util = require('util')
 | ---
 | ...
sid = 0
 | ---
 | ...
rid = 0
 | ---
 | ...
big_timeout = 1000000
 | ---
 | ...
small_timeout = 0.001
 | ---
 | ...

timeout = 0.01
 | ---
 | ...
lref.add(rid, sid, big_timeout)
 | ---
 | - true
 | ...
-- Send fails.
ok, err = vshard.storage.bucket_send(1, util.replicasets[2],                    \
                                     {timeout = timeout})
 | ---
 | ...
assert(not ok and err.message)
 | ---
 | - Timeout exceeded
 | ...
lref.use(rid, sid)
 | ---
 | - true
 | ...
-- Still fails - use only makes ref undead until it is deleted explicitly.
ok, err = vshard.storage.bucket_send(1, util.replicasets[2],                    \
                                     {timeout = timeout})
 | ---
 | ...
assert(not ok and err.message)
 | ---
 | - Timeout exceeded
 | ...

_ = test_run:switch('storage_2_a')
 | ---
 | ...
-- Receive (from another replicaset) also fails.
big_timeout = 1000000
 | ---
 | ...
timeout = 0.01
 | ---
 | ...
ok, err = vshard.storage.bucket_send(1501, util.replicasets[1],                 \
                                     {timeout = timeout})
 | ---
 | ...
assert(not ok and err.message)
 | ---
 | - Timeout exceeded
 | ...

--
-- After unref all the bucket moves are allowed again.
--
_ = test_run:switch('storage_1_a')
 | ---
 | ...
lref.del(rid, sid)
 | ---
 | - true
 | ...

vshard.storage.bucket_send(1, util.replicasets[2], {timeout = big_timeout})
 | ---
 | - true
 | ...
wait_bucket_is_collected(1)
 | ---
 | ...

_ = test_run:switch('storage_2_a')
 | ---
 | ...
vshard.storage.bucket_send(1, util.replicasets[1], {timeout = big_timeout})
 | ---
 | - true
 | ...
wait_bucket_is_collected(1)
 | ---
 | ...

--
-- While bucket move is in progress, ref won't work.
--
vshard.storage.internal.errinj.ERRINJ_LAST_RECEIVE_DELAY = true
 | ---
 | ...

_ = test_run:switch('storage_1_a')
 | ---
 | ...
fiber = require('fiber')
 | ---
 | ...
_ = fiber.create(vshard.storage.bucket_send, 1, util.replicasets[2],            \
                 {timeout = big_timeout})
 | ---
 | ...
ok, err = lref.add(rid, sid, small_timeout)
 | ---
 | ...
assert(not ok and err.message)
 | ---
 | - Timeout exceeded
 | ...
-- Ref will wait if timeout is big enough.
ok, err = nil
 | ---
 | ...
_ = fiber.create(function()                                                     \
    ok, err = lref.add(rid, sid, big_timeout)                                   \
end)
 | ---
 | ...

_ = test_run:switch('storage_2_a')
 | ---
 | ...
vshard.storage.internal.errinj.ERRINJ_LAST_RECEIVE_DELAY = false
 | ---
 | ...

_ = test_run:switch('storage_1_a')
 | ---
 | ...
wait_bucket_is_collected(1)
 | ---
 | ...
test_run:wait_cond(function() return ok or err end)
 | ---
 | - true
 | ...
lref.use(rid, sid)
 | ---
 | - true
 | ...
lref.del(rid, sid)
 | ---
 | - true
 | ...
assert(ok and not err)
 | ---
 | - true
 | ...

_ = test_run:switch('storage_2_a')
 | ---
 | ...
vshard.storage.bucket_send(1, util.replicasets[1], {timeout = big_timeout})
 | ---
 | - true
 | ...
wait_bucket_is_collected(1)
 | ---
 | ...

--
-- Refs are bound to sessions.
--
box.schema.user.grant('storage', 'super')
 | ---
 | ...
lref = require('vshard.storage.ref')
 | ---
 | ...
small_timeout = 0.001
 | ---
 | ...
function make_ref(rid, timeout)                                                 \
    return lref.add(rid, box.session.id(), timeout)                             \
end
 | ---
 | ...
function use_ref(rid)                                                           \
    return lref.use(rid, box.session.id())                                      \
end
 | ---
 | ...
function del_ref(rid)                                                           \
    return lref.del(rid, box.session.id())                                      \
end
 | ---
 | ...

_ = test_run:switch('storage_1_a')
 | ---
 | ...
netbox = require('net.box')
 | ---
 | ...
remote_uri = test_run:eval('storage_2_a', 'return box.cfg.listen')[1]
 | ---
 | ...
c = netbox.connect(remote_uri)
 | ---
 | ...

-- Ref is added and does not disappear anywhere on its own.
c:call('make_ref', {1, small_timeout})
 | ---
 | - true
 | ...
_ = test_run:switch('storage_2_a')
 | ---
 | ...
assert(lref.count == 1)
 | ---
 | - true
 | ...
_ = test_run:switch('storage_1_a')
 | ---
 | ...

-- Use works.
c:call('use_ref', {1})
 | ---
 | - true
 | ...
_ = test_run:switch('storage_2_a')
 | ---
 | ...
assert(lref.count == 1)
 | ---
 | - true
 | ...
_ = test_run:switch('storage_1_a')
 | ---
 | ...

-- Del works.
c:call('del_ref', {1})
 | ---
 | - true
 | ...
_ = test_run:switch('storage_2_a')
 | ---
 | ...
assert(lref.count == 0)
 | ---
 | - true
 | ...
_ = test_run:switch('storage_1_a')
 | ---
 | ...

-- Expiration works. Try to add a second ref when the first one is expired - the
-- first is collected and a subsequent use and del won't work.
c:call('make_ref', {1, small_timeout})
 | ---
 | - true
 | ...
_ = test_run:switch('storage_2_a')
 | ---
 | ...
assert(lref.count == 1)
 | ---
 | - true
 | ...
_ = test_run:switch('storage_1_a')
 | ---
 | ...

fiber.sleep(small_timeout)
 | ---
 | ...
c:call('make_ref', {2, small_timeout})
 | ---
 | - true
 | ...
ok, err = c:call('use_ref', {1})
 | ---
 | ...
assert(ok == nil and err.message)
 | ---
 | - 'Can not use a storage ref: no ref'
 | ...
ok, err = c:call('del_ref', {1})
 | ---
 | ...
assert(ok == nil and err.message)
 | ---
 | - 'Can not delete a storage ref: no ref'
 | ...
_ = test_run:switch('storage_2_a')
 | ---
 | ...
assert(lref.count == 1)
 | ---
 | - true
 | ...
_ = test_run:switch('storage_1_a')
 | ---
 | ...

--
-- Session disconnect removes its refs.
--
c:call('make_ref', {3, big_timeout})
 | ---
 | - true
 | ...
c:close()
 | ---
 | ...
_ = test_run:switch('storage_2_a')
 | ---
 | ...
test_run:wait_cond(function() return lref.count == 0 end)
 | ---
 | - true
 | ...

_ = test_run:switch("default")
 | ---
 | ...
test_run:drop_cluster(REPLICASET_2)
 | ---
 | ...
test_run:drop_cluster(REPLICASET_1)
 | ---
 | ...
